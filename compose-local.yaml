services:
  # Main SQL Database.
  backend_postgres:
    container_name: backend_postgres
    image: postgres:latest
    restart: on-failure
    env_file: ".postgres.env"
    networks:
      - shared-network
    ports:
      - "6432:5432"
    volumes:
      - "postgres-data:/data"

  # Redis database for operating games and caching data.
  backend_redis:
    container_name: backend_redis
    image: redis:latest
    restart: on-failure
    command: "redis-server /usr/local/etc/redis/redis.conf"
    networks:
      - shared-network
    ports:
      - "6379:6379"
    volumes:
      - "redis-data:/data"
      - "./redis.conf:/usr/local/etc/redis/redis.conf"

  # S3 storage for managing files.
  backend_minio:
    container_name: backend_minio
    image: minio/minio:latest
    restart: on-failure
    command: server /data --console-address ":9001"
    env_file: ".minio.env"
    networks:
      - shared-network
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio-data:/data"

  # Broker for managing celery tasks.
  backend_rabbitmq:
    container_name: backend_rabbitmq
    image: rabbitmq:3-management
    restart: on-failure
    env_file: ".rabbitmq.env"
    networks:
      - shared-network
    ports:
      - "5672:5672"
      - "5673:15672"
    volumes:
      - "rabbitmq-data:/data"

  # Main ASGI app.
  backend_server:
    container_name: backend_server
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    command: bash -c "poetry run alembic upgrade head && poetry run uvicorn --host 0.0.0.0 --port 8000 --loop asyncio --log-config app/logging.json app.asgi:app"
    env_file: ".server.env"
    networks:
      - shared-network
    ports:
      - "8000:8000"
    labels:
      - "logging.promtail=true"
      - "logging_jobname=monopoly_server"
    depends_on:
      - postgres
      - redis
      - minio
      - rabbitmq

  # Main Celery worker for managing task execution.
  backend_celery_worker:
    container_name: backend_celery_worker
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    command: bash -c "poetry run celery -A app.workers.worker.worker worker --concurrency=1 --loglevel=INFO"
    env_file: ".server.env"
    depends_on:
      - rabbitmq

  # Cron worker for executing scheduled tasks.
  backend_celery_beat:
    container_name: backend_celery_beat
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    command: bash -c "poetry run celery -A app.workers.worker.worker beat --loglevel=INFO"
    env_file: ".server.env"
    depends_on:
      - rabbitmq

volumes:
  postgres-data:
  redis-data:
  minio-data:
  rabbitmq-data:

networks:
  shared-network:
    external: true
